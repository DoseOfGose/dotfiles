# Current setup is targeting MacOS.  Will eventually get around to testing on Ubuntu and updating.

# Make sure to use the default shell.  E.g. on OSX this is /usr/local/bin/bash
set-option -g default-shell $SHELL

# Time in ms.  0 is "Until user presses a key"
set-option -g display-time 0


# Make it so I can change the terminal emulator title
set -g set-titles on
# Title format.  "#S" is session name, "#W" is window name
set -g set-titles-string "#S / #W" # E.g. "work-session / backend"
# I don't _want_ to use the mouse, but sometimes I _have_ to.
set -g mouse on

# Big history
set -g history-limit 102400
# Start ordering at 1 instead of 0.  These are used for hotkeys, so 1 is more convenient
set -g base-index 1
setw -g pane-base-index 1
# If I have 3 windows open (1, 2, 3) and I close
# window 2, by default 3 would remain "3".  This would
# collapse the empty number by renumbering:
set -g renumber-windows on


# vi mode, of course
setw -g mode-keys vi
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-selection-and-cancel
# Shorten time after sending esc, otherwise vim can be a choppy experience
set -g escape-time 0

# I think this is related to FocusIn/FocusOut events from the terminals.  Not sure if tmux or plugins need it?
set-option -g focus-events on

# I used to use these bindings, but now just use the default bindings so I'm used to it even on remote sessions
# split panes using | and -
# bind | split-window -h
# bind - split-window -v

# remap prefix from 'C-b' to 'C-a'
# this way I can use C-a for my local tmux, and use default keys on nested remote sessions
unbind C-b
set-option -g prefix C-a # is this what prevents me from binding C-a to actions in key-tables?
bind C-a send-prefix


# Vim keys for navigating panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Have seen setups that integrate vim and tmux commands into one hotkey that is smart about the application boundaries.  Should look into that

# Need to revisit if I'm happy with the current setup or not in regards to copy/paste.  I'm pretty used to Copy Mode now
# set-option -g default-command "reattach-to-user-namespace -l bash" # Or '-l zsh'.  Should set this up to know what $shell and based on platform
#   see: if-shell
bind C-v run "pbpaste | tmux load-buffer - && tmux paste-buffer"
bind C-v run "tmx show-buffer | pbcopy"


################################
# "Git Popup Session" Section  #
#++++++++++++++++++++++++++++++#

# This are of the conf is to setup keybindings related to my custom git popup session.
# See related section in README for purpose/usage https://github.com/DoseOfGose/dotfiles#tmux-git-popup-session

# 1. General Settings:

# Set a custom "Leader" key for all the Git Popup Session's keybindings
# This relies on using key-tables (-T flag on 'bind-key') to toggle into a 1-time keystroke layer
# Because of this, once you activate the key-table (with 'switch-client -T...'), all key strokes are available

# Unbind any current bindings for the leader
# Do I need this?
# 1. Pretty sure this isn't bound to anything in 'mode-keys vi'
# 2. Does binding the key afterwards made this a redundant step?
unbind C-g
# This keystroke is the "Leader" key.  Activate with `<Prefix><Leader>`
bind C-g switch-client -Tgit-table

# Reference to script that performs all the logic and heavy liftings for most of these keybindings
# This feature does not work without this file being correct
popup_git_script="~/.dotfiles/aux/tmux-test-git.sh"

# Since the `<Prefix><Leader>` sequence already has the Control button pressed, some key bindings also use Control to help with ease/speed of use
# I try to keep actions that could cause issues if accidentally triggered on non-Control bindings to make them harder to accidentally fire off
# Since killing the sessions could accidentally lose important processes or information, those are guarded behind a popup menu for confirmation (unless using the `?` help menu)


# 2. Meta Key Bindings

# Note: The popup session will use a lookup function to find any configured starting directories.  Otherwise, it defaults to #{current_pane_path}

# exit_popup merely detaches the popup.  It only executes if the current session name starts with the defined session_prefix ("git-popup-" by default)
# I typically don't use this, instead just toggling
bind -Tgit-table C-Escape run -b "$popup_git_script exit_popup"
# Opens the popup if the session name does NOT start with the session_prefix.  Closes the popup if the session name does start with the session_prefix
# Set to be the same as the `<Leader>` for easy rapid double-tap.  Showing and hiding the popup should be as easy as possible.
bind -Tgit-table C-g run -b "$popup_git_script toggle_popup"
# Binding to kill the popup session associated with the current session.  Smart enough to kill the popup session even if inside the popup session, but leave the parent alone
# Based on the session name starting with session_prefix or not
# Since this is so irreversible, user is prompted with a confirmation menu to execute even after hitting keybinding to prevent accidental triggering
bind -Tgit-table x display-menu -T "Kill this session's git popup session?" "Yes" y "run -b \"$popup_git_script kill_current_git_session\"" "No" n "display-message \"Kill session canceled\""
# Same as kill_current_git_session but targets ALL sessions on this tmux server that start with the session_prefix
bind -Tgit-table X display-menu -T "Kill ALL git popup sessions?" "Yes" y "run -b \"$popup_git_script kill_all_git_sessions\"" "No" n "display-message \"Kill sessions canceled\""
# This pops up a handy tmux menu with all keybindings as a reference.  The menu's keystroke selection matches the bindings here, however that is currently manually configured
# Since the menu text is so long, it is defined in the reference script for easier management
bind -Tgit-table ? run -b "$popup_git_script show_help_menu"


# 3. Git/Project Bindings

# These commands will all toggle the popup as necessary, then send-keys the associated command

# 'git status', except when logic changes the '$git' variable in the reference script (e.g. some bare repo setups need flags to function)
bind -Tgit-table C-s run -b "$popup_git_script git_status"
# 'git add .', except when logic changes the '$git_dot_option' variable in the reference script (e.g. 'git add -u' for certain projects, e.g. dotfiles)
bind -Tgit-table a run -b "$popup_git_script git_add"
# 'git add --interactive'.  C-a is my <Leader> key, which still captures even in a key-table, otherwise I'd want this to be quickly accessible
bind -Tgit-table A run -b "$popup_git_script git_add_interactive"
# 'git lg' - a custom alias in my gitconfig for displaying pretty logs for branch
bind -Tgit-table C-l run -b "$popup_git_script git_lg"
# 'git lga' - a custom alias in my gitconfig for displaying pretty logs for repo
bind -Tgit-table l run -b "$popup_git_script git_lga"
# 'git push'
bind -Tgit-table P run -b "$popup_git_script git_push"
# 'git pull'
bind -Tgit-table p run -b "$popup_git_script git_pull"
# 'git commit'
bind -Tgit-table c run -b "$popup_git_script git_commit"
# 'yarn'
bind -Tgit-table C-i run -b "$popup_git_script git_yarn_install"
# 'yarn test'
bind -Tgit-table C-t run -b "$popup_git_script git_yarn_test"



################################
#  Miscellanous Key Bindings   #
#++++++++++++++++++++++++++++++#

# Following keybinding(s) are temporary and just to help with expediting testing changes
# When I have a general purpose key-table "layer" I'll move some of these there
# Temp command to help source quickly for testing:
bind -Tgit-table S source ~/.tmux.conf
